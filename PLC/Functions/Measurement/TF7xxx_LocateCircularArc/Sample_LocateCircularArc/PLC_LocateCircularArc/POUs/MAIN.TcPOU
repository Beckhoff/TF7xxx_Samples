<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="MAIN" Id="{5b9b9712-f9ed-46bd-9f5a-314fbbca9d9a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	hr 				: HRESULT;
	
	fbCamera		: FB_VN_SimpleCameraControl;
	eState			: ETcVnCameraState;
	
	ipImageIn		: ITcVnImage;
	ipImageInDisp	: ITcVnDisplayableImage;
	ipImageRes		: ITcVnImage;
	ipImageResDisp	: ITcVnDisplayableImage;
	
	// result
	stArc			: TcVnCircularArc;
	
	// input parameters (to specify where to start searching for the circular arc)
	aCenter			: TcVnPoint2_REAL := [420, 310];
	fRadius			: REAL := 270;
	fDirection		: LREAL := 2.1;
	
	// drawing
	aColor			: TcVnVector4_LREAL := [0, 175, 0];
	sText			: STRING(255);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//	Disclaimer
  	
//	THIS publication contains statements about the suitability OF our products FOR certain 
//	areas OF application. These statements are based on typical features OF our products. 
//	The examples shown in THIS publication are FOR demonstration purposes only. The 
//	information provided herein should NOT be regarded as specific operation characteristics. 
//	It is incumbent on the customer TO check AND decide whether a product is suitable FOR use 
//	in a particular application. We DO NOT give ANY warranty that the source code which is 
//	made available with this publication is complete or accurate. 
  	
//	THE SAMPLE CODE CONTAINED IN THIS PUBLICATION IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY 
//	KIND, EITHER EXPRESSED, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION, ANY WARRANTY 
//	WITH RESPECT TO NON-INFRINGEMENT, FREEDOM FROM PROPRIETARY RIGHTS OF THIRD PARTIES OR 
//	FITNESS FOR ANY PARTICULAR PURPOSE. 
  	
//	THIS publication may be changed FROM TIME TO TIME without prior notice. No liability 
//	is assumed FOR errors AND/OR omissions. Our products are described in detail in our 
//	data sheets AND documentations. Product-specific warnings AND cautions must be observed. 
//	FOR the latest version OF our data sheets AND documentations visit our website 
//	(www.beckhoff.de). 
  	
//	© Beckhoff Automation GmbH & Co. KG, March 2020
  	
//	The reproduction, distribution AND utilization OF THIS document as well as the 
//	communication OF its contents TO others without express authorization is prohibited. 
//	Offenders will be held liable FOR the payment OF damages. All rights reserved in the 
//	event of the grant of a patent, utility model or design.

//	==========================================================================================

// SAMPLE - LOCATE CIRCULAR ARC
// ============================

// Steps To Do:
// -------------
// 1. Add the images to FileSource1

eState := fbCamera.GetState();

CASE eState OF

TCVN_CS_INITIAL, TCVN_CS_INITIALIZING, TCVN_CS_INITIALIZED, TCVN_CS_OPENING, TCVN_CS_OPENED, TCVN_CS_STARTACQUISITION:
	hr := fbCamera.StartAcquisition();

TCVN_CS_ACQUIRING:
	hr := fbCamera.GetCurrentImage(ipImageIn);	
	
	IF SUCCEEDED(hr) AND ipImageIn <> 0 THEN
		
		hr := F_VN_LocateCircularArc(
				ipSrcImage			:= ipImageIn, 
				stCircularArc		:= stArc, 
				aCenter				:= aCenter, 
				fSearchRadius		:= fRadius, 
				fArcDirectionRad	:= fDirection, 
				eEdgeDirection		:= TCVN_ED_LIGHT_TO_DARK, 
				fMinStrength		:= 100, 
				hrPrev				:= hr);
		
		// Draw result for visualization
		hr := F_VN_ConvertColorSpace(ipImageIn, ipImageRes, TCVN_CST_GRAY_TO_RGB, hr);
		hr := F_VN_DrawCircularArc(stArc, ipImageRes, aColor, 2, hr);
		sText := CONCAT(CONCAT(CONCAT('Center      ', REAL_TO_STRING(stArc.aCenter[0])), ', '), REAL_TO_STRING(stArc.aCenter[1]));
		hr := F_VN_PutText(sText, ipImageRes, 420, 25, TCVN_FT_HERSHEY_SIMPLEX, 0.7, aColor, hr);
		sText := CONCAT('Radius      ', REAL_TO_STRING(stArc.fRadius));
		hr := F_VN_PutText(sText, ipImageRes, 420, 50, TCVN_FT_HERSHEY_SIMPLEX, 0.7, aColor, hr);
		sText := CONCAT('Angle start  ', REAL_TO_STRING(stArc.fStartAngle * 180 / LREAL_TO_REAL(PI)));
		hr := F_VN_PutText(sText, ipImageRes, 420, 75, TCVN_FT_HERSHEY_SIMPLEX, 0.7, aColor, hr);
		sText := CONCAT('Angle end   ', REAL_TO_STRING(stArc.fEndAngle * 180 / LREAL_TO_REAL(PI)));
		hr := F_VN_PutText(sText, ipImageRes, 420, 100, TCVN_FT_HERSHEY_SIMPLEX, 0.7, aColor, hr);
		
		// Display source and result image		
		hr := F_VN_TransformIntoDisplayableImage(ipImageIn, ipImageInDisp, S_OK);
		hr := F_VN_TransformIntoDisplayableImage(ipImageRes, ipImageResDisp, S_OK);
	END_IF
	
TCVN_CS_ERROR:
	hr := fbCamera.Reset();	

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="30" Count="40" />
      <LineId Id="135" Count="0" />
      <LineId Id="72" Count="15" />
      <LineId Id="89" Count="20" />
      <LineId Id="2" Count="0" />
      <LineId Id="110" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>