<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="MAIN" Id="{fc8f28b9-1f69-4fc3-82ca-fb8fbb2c1e34}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	hr						:	HRESULT;

	fbCamera				:	FB_VN_SimpleCameraControl;
	eState					:	ETcVnCameraState;
	
	ipImageIn				: 	ITcVnImage;
	ipImageInDisp			: 	ITcVnDisplayableImage;
	
	ipImageRes				: 	ITcVnImage;
	ipImageResDisp			:	ITcVnDisplayableImage;
	
	// Sample Specific Variables
	ipContourList			:	ITcVnContainer;
	ipContour				:	ITcVnContainer;
	ipIterator				:	ITcVnForwardIterator;
	eRetrievalMode			:	ETcVnContourRetrievalMode := TCVN_CRM_LIST;
	eApproximationMethod	:	ETcVnContourApproximationMethod := TCVN_CAM_SIMPLE;
	aOffset					:	TcVnPoint;
		
	// Colors	
	aColorRed				:	TcVnVector4_LREAL := [255, 0, 0];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//	Disclaimer
  	
//	THIS publication contains statements about the suitability OF our products FOR certain 
//	areas OF application. These statements are based on typical features OF our products. 
//	The examples shown in THIS publication are FOR demonstration purposes only. The 
//	information provided herein should NOT be regarded as specific operation characteristics. 
//	It is incumbent on the customer TO check AND decide whether a product is suitable FOR use 
//	in a particular application. We DO NOT give ANY warranty that the source code which is 
//	made available with this publication is complete or accurate. 
  	
//	THE SAMPLE CODE CONTAINED IN THIS PUBLICATION IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY 
//	KIND, EITHER EXPRESSED, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION, ANY WARRANTY 
//	WITH RESPECT TO NON-INFRINGEMENT, FREEDOM FROM PROPRIETARY RIGHTS OF THIRD PARTIES OR 
//	FITNESS FOR ANY PARTICULAR PURPOSE. 
  	
//	THIS publication may be changed FROM TIME TO TIME without prior notice. No liability 
//	is assumed FOR errors AND/OR omissions. Our products are described in detail in our 
//	data sheets AND documentations. Product-specific warnings AND cautions must be observed. 
//	FOR the latest version OF our data sheets AND documentations visit our website 
//	(www.beckhoff.de). 
  	
//	© Beckhoff Automation GmbH & Co. KG, March 2020
  	
//	The reproduction, distribution AND utilization OF THIS document as well as the 
//	communication OF its contents TO others without express authorization is prohibited. 
//	Offenders will be held liable FOR the payment OF damages. All rights reserved in the 
//	event of the grant of a patent, utility model or design.
  	
//	-----------------------------------------------------------------------------------------

//	SAMPLE - FIND CONTOURS AND Approximate the Contour describing points
//	======================================================================
  	
//	Steps To Do
//	-------------
//	1. Add the two images to the file source control
//	2. In Run Mode: 
// 			Change the Contour Approximation Method (eApproximationMethod) 
//			with write value and find out the differents between methods

eState := fbCamera.GetState();

CASE eState OF
	
TCVN_CS_INITIAL, TCVN_CS_INITIALIZING, TCVN_CS_INITIALIZED, TCVN_CS_OPENING, TCVN_CS_OPENED, TCVN_CS_STARTACQUISITION:
	hr := fbCamera.StartAcquisition();
	
TCVN_CS_ACQUIRING:
	
	hr := fbCamera.GetCurrentImage(ipImageIn);
	
	IF SUCCEEDED(hr) AND_THEN ipImageIn <> 0 AND eRetrievalMode <> TCVN_CRM_FLOODFILL THEN
		
		// Create Result Image
		hr := F_VN_ConvertColorSpace(ipImageIn, ipImageRes, TCVN_CST_Gray_TO_RGB, hr);
		
		// Find Contours and their Hierarchy
		// -----------------------------------
		hr := F_VN_FindContoursExp(
				ipSrcImage				:=	ipImageIn, 
				ipContours				:=	ipContourList, 
				eRetrievalMode			:=	eRetrievalMode, 
				eApproximationMethod	:=	eApproximationMethod, 
				aOffset					:=	aOffset, 
				hrPrev					:=	hr
		);
		
		// Draw the points of the contour				
		hr := F_VN_GetForwardIterator(ipContourList, ipIterator, hr);		
		WHILE SUCCEEDED(hr) AND_THEN ipIterator.CheckIfEnd() <> S_OK DO
			hr := F_VN_GetContainer(ipIterator, ipContour, hr);
			hr := F_VN_IncrementIterator(ipIterator, hr);
			hr := F_VN_DrawPoints(ipContour, ipImageRes, ETcVnDrawShape.TCVN_DS_CIRCLE, aColorRed, hr);				
		END_WHILE
							
		// Display Input Image
		hr := F_VN_TransformIntoDisplayableImage(ipImageIn, ipImageInDisp, hr);		
								
		// Display Results			
		hr := F_VN_TransformIntoDisplayableImage(ipImageRes, ipImageResDisp, hr);
		
	END_IF
	
TCVN_CS_ERROR:
	hr := fbCamera.Reset();

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="30" Count="43" />
      <LineId Id="144" Count="0" />
      <LineId Id="75" Count="7" />
      <LineId Id="86" Count="21" />
      <LineId Id="118" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="108" Count="7" />
      <LineId Id="2" Count="0" />
      <LineId Id="116" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>