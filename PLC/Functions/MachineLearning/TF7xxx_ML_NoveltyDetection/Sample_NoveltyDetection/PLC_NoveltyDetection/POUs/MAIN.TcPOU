<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{e9dd98b7-c31c-4ba8-ba6d-7e10b083fc3a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	eNoveltyDetectorType: 	E_NoveltyDetectorType;		// Novelty detector type
	stParams			:	ST_NoveltyDetectorParams;	// Novelty detector parameters
	bResetModel			:	BOOL;						// Reset model to start a new training with a changed model or parameters
	bResetTrainingData	:	BOOL;						// Reset the trained features to get new ones and train model
	eTrainedModelType	: 	E_NoveltyDetectorType;
	
	hrTrain				:	HRESULT;
	hrTest				:	HRESULT;
	
	ipImageTest			:	ITcVnImage;
	ipImageResDisp		:	ITcVnDisplayableImage;
	
	eCameraState		:	ETcVnCameraState;	
	fbCameraTest		:	FB_VN_SimpleCameraControl;
	
	fbTrainingDataHandler:	FB_TrainingDataHandler;
	
	ipNoveltyDetectorModel:	ITcVnMlModel;
	ipSamplesTraining	:	ITcVnContainer;
	ipFeatureScaling	:	ITcVnContainer;
	ipSampleTest		:	ITcVnContainer;
	fNovelty			:	REAL;
	
	// Result
	fNoveltyThreshold	:	REAL;
	sLabel				:	STRING(255);
	aGreen				:	TcVnVector4_LREAL := [0, 255, 0];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Disclaimer

// This publication contains statements about the suitability of our products for certain
// areas of application. These statements are based on typical features of our products.
// The examples shown in this publication are for demonstration purposes only.
// The information provided herein should not be regarded as specific operation characteristics.
// It is incumbent on the customer to check and decide whether a product is suitable for use
// in a particular application. We do not give any warranty that the source code which is
// made available with this publication is complete or accurate.

// THE SAMPLE CODE CONTAINED IN THIS PUBLICATION IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND,
// EITHER EXPRESSED, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION, ANY WARRANTY WITH RESPECT TO NON-INFRINGEMENT,
// FREEDOM FROM PROPRIETARY RIGHTS OF THIRD PARTIES OR FITNESS FOR ANY PARTICULAR PURPOSE.

// This publication may be changed from time to time without prior notice.
// No liability is assumed for errors and/or omissions.
// Our products are described in detail in our data sheets and documentations.
// Product-specific warnings and cautions must be observed.
// For the latest version of our data sheets and documentations visit our website (www.beckhoff.de).

// © Beckhoff Automation GmbH & Co. KG, December 2023

// The reproduction, distribution and utilization of this document as well as the communication
// of its contents to others without express authorization is prohibited. 
// Offenders will be held liable for the payment of damages.
// All rights reserved in the event of the grant of a patent, utility model or design.

//	==========================================================================================

// SAMPLE - Machine Learning Novelty (Anomaly) Detection
//	-------------------------------------------------------

// Steps To Do:
// ------------
// 1. Add the training images to the TrainingImages control, only the images of one object class can be selected
// 2. Add the test images to the TestingImages control
// 3. Activate the configuration -> Start TwinCAT system and PLC to run -> watch the results in the ADS Image Watch
// 4. Change eNoveltyDetectorType and stParams to change the model or settings
// 5. Set bResetModel to start create a new model and start training
//    Note: If you change to eClassifierType = STA or from this type to another, a bResetTrainingData is automatically performed due to the different scaling of the training data.
// 6. Set bResetTrainingData to get new training data if images or feature extraction changed

// Reset the trained features to get new ones and train model
IF bResetTrainingData
	OR (eTrainedModelType <> E_NoveltyDetectorType.STA AND eNoveltyDetectorType = E_NoveltyDetectorType.STA)
	OR (eTrainedModelType = E_NoveltyDetectorType.STA AND eNoveltyDetectorType <> E_NoveltyDetectorType.STA) THEN
	
	bResetTrainingData := FALSE;
	fbTrainingDataHandler.Reset();
	FW_SafeRelease(ADR(ipSamplesTraining));
	FW_SafeRelease(ADR(ipFeatureScaling));
	FW_SafeRelease(ADR(ipNoveltyDetectorModel));
	eTrainedModelType := eNoveltyDetectorType;
	// Reset return value
	hrTrain := S_OK;
END_IF

// Get sample data for training
fbTrainingDataHandler(eNoveltyDetectorType := eNoveltyDetectorType);
IF ipSamplesTraining = 0 AND ipFeatureScaling = 0 THEN
	hrTrain := fbTrainingDataHandler.GetTrainingData(ipSamplesTraining, ipFeatureScaling);
END_IF

// Retrain with changed model or parameters
IF bResetModel THEN
	bResetModel := FALSE;
	FW_SafeRelease(ADR(ipNoveltyDetectorModel));
	eTrainedModelType := eNoveltyDetectorType;
	// Reset return value
	hrTrain := S_OK;
END_IF

IF SUCCEEDED(hrTrain) AND ipSamplesTraining <> 0 AND ipNoveltyDetectorModel = 0 THEN

// Set novelty threshold according to model results 
fNoveltyThreshold := 1.0;
			
	// Create the model
	CASE eNoveltyDetectorType OF
		
		E_NoveltyDetectorType.KMPP:
			hrTrain := F_VN_CreateKmppModelExp(
							ipMlModel			:=	ipNoveltyDetectorModel,
							eKmppType			:=	TCVN_PC_NOVELTY_DETECTOR,
							nK					:=	stParams.nKmppK,
							bDoublePrecision	:=	stParams.bKmppDoublePrecision,
							nMaxIterations		:=	stParams.nKmppMaxiterations,
							fEpsilon			:=	stParams.fKmppEpsilon,
							hrPrev				:=	hrTrain);
		
		E_NoveltyDetectorType.KNN:
			hrTrain := F_VN_CreateKnnModel(
							ipMlModel			:=	ipNoveltyDetectorModel,
							eKnnType			:=	TCVN_KNN_NOVELTY_DETECTOR,
							nK					:=	stParams.nKnnK,
							hrPrev				:=	hrTrain);
			
		E_NoveltyDetectorType.LBG:
			hrTrain := F_VN_CreateLbgModelExp(
							ipMlModel			:=	ipNoveltyDetectorModel,
							eLbgType			:=	TCVN_PC_NOVELTY_DETECTOR,
							nMaxClusters		:=	stParams.nLbgMaxClusters,
							fMaxClusterRadius	:=	stParams.fLbgMaxClusterRadius,
							bSingleSplitSteps	:=	stParams.bLbgSingleSplitSteps,
							bDoublePrecision	:=	stParams.bLbgDoublePrecision,
							nMaxiterations		:=	stParams.nLbgMaxIterations,
							fEpsilon			:=	stParams.fLbgEpsilon,
							hrPrev				:=	hrTrain);
			
		E_NoveltyDetectorType.NBC:
			hrTrain := F_VN_CreateNbcModel(
							ipMlModel			:=	ipNoveltyDetectorModel,
							eNbcType			:=	TCVN_NBC_NOVELTY_DETECTOR,
							hrPrev				:=	hrTrain);
							
			// Set novelty threshold according to model results 
			fNoveltyThreshold := 4.0;							

		E_NoveltyDetectorType.STA:
			hrTrain := F_VN_CreateStaModelExp2(
							ipMlModel           :=	ipNoveltyDetectorModel,
							eStaType            :=	TCVN_STA_NOVELTY_DETECTOR,
							fRho                :=	stParams.fStaRho,
							nNu                 :=	stParams.nStaNu,
							bDoublePrecision    :=	stParams.bStaDoublePrecision,
							fBetaSbm			:=	stParams.fStaBetaSbm,
							nPhi				:=	stParams.nStaPhi,
							nTau				:=	stParams.nStaTau,
							hrPrev				:=	hrTrain);
								
			// Set novelty threshold according to model results 
			fNoveltyThreshold := 0.3;
		
		E_NoveltyDetectorType.SVM:
			hrTrain := F_VN_CreateSvmModelExp(
							ipMlModel			:=	ipNoveltyDetectorModel,
							eSvmType			:=	TCVN_SVM_NOVELTY_DETECTOR,
							fC					:=	0,
							fNu					:=	stParams.fSvmNu,
							fP					:=	0,
							eKernelType			:=	stParams.eSvmKernelType,
							fGamma				:=	stParams.fSvmGamma,
							fCoef0				:=	stParams.fSvmCoef0,
							fDegree				:=	stParams.fSvmDegree,
							nMaxIterations		:=	stParams.nSvmMaxIterations,
							fEpsilon			:=	stParams.fSvmEpsilon,
							hrPrev				:=	hrTrain);
	
	END_CASE
	
	// Train model
	hrTrain := F_VN_TrainBatch(
					ipMlModel   :=  ipNoveltyDetectorModel,
					ipSamples   :=  ipSamplesTraining,
					ipOutputs   :=  0,
					hrPrev      :=  hrTrain);

END_IF

// Get test images
eCameraState := fbCameraTest.GetState();

IF eCameraState = TCVN_CS_ERROR THEN
	hrTest := fbCameraTest.Reset();

ELSIF eCameraState < TCVN_CS_ACQUIRING THEN
	hrTest := fbCameraTest.StartAcquisition();

// Camera streaming
ELSIF eCameraState = TCVN_CS_ACQUIRING THEN
	hrTest := fbCameraTest.GetCurrentImage(ipImageTest);

	// Check if new image was received
	IF SUCCEEDED(hrTest) AND ipImageTest <> 0 THEN

        IF ipNoveltyDetectorModel <> 0 AND ipFeatureScaling <> 0 THEN
			// Get features from sample image and scale 
			hrTest := F_ExtractFeatures(ipImageTest, ipSampleTest, hrTest);
			IF  eNoveltyDetectorType = E_NoveltyDetectorType.STA THEN
				hrTest := F_VN_FeatureScalingExp(ipSampleTest, ipFeatureScaling, ipSampleTest, 0.2, 0.8, hrTest);
			ELSE
				hrTest := F_VN_FeatureScaling(ipSampleTest, ipFeatureScaling, ipSampleTest, hrTest);
			END_IF
			
			// Get novelty result
			hrTest := F_VN_GetSampleNovelty(ipNoveltyDetectorModel, ipSampleTest, fNovelty, hrTest);
			
			// Check the degree of novelty and write result
			IF fNovelty <= fNoveltyThreshold THEN
				sLabel := CONCAT('Known: ',REAL_TO_STRING(fNovelty));
			ELSE
				sLabel := CONCAT('Unknown: ',REAL_TO_STRING(fNovelty));
			END_IF
			hrTest := F_VN_PutTextExp(sLabel, ipImageTest, 30, 60, TCVN_FT_HERSHEY_PLAIN, 4, aGreen, 2, TCVN_LT_ANTIALIASED, FALSE, hrTest);
		END_IF
		
		// Display image
		hrTest := F_VN_TransformIntoDisplayableImage(ipImageTest, ipImageResDisp, S_OK);
	END_IF
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="708" Count="1" />
      <LineId Id="1030" Count="23" />
      <LineId Id="735" Count="12" />
      <LineId Id="1083" Count="0" />
      <LineId Id="748" Count="3" />
      <LineId Id="1167" Count="1" />
      <LineId Id="1206" Count="0" />
      <LineId Id="752" Count="3" />
      <LineId Id="933" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="756" Count="11" />
      <LineId Id="1175" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="768" Count="2" />
      <LineId Id="963" Count="1" />
      <LineId Id="771" Count="0" />
      <LineId Id="965" Count="0" />
      <LineId Id="772" Count="36" />
      <LineId Id="968" Count="0" />
      <LineId Id="967" Count="0" />
      <LineId Id="966" Count="0" />
      <LineId Id="1093" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1127" Count="8" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1137" Count="0" />
      <LineId Id="1136" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="1092" Count="0" />
      <LineId Id="810" Count="12" />
      <LineId Id="824" Count="31" />
      <LineId Id="1094" Count="3" />
      <LineId Id="856" Count="4" />
      <LineId Id="898" Count="1" />
      <LineId Id="903" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="904" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="863" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>