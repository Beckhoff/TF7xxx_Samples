<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="MAIN" Id="{25eaab7c-bb5e-4882-84c7-a9c5663041a9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	hr						:	HRESULT;
	
	fbCamera				:	FB_VN_SimpleCameraControl;
	eState					:	ETcVnCameraState;
	
	// Images
	ipImageIn				:	ITcVnImage;
	ipImageInDisp			:	ITcVnDisplayableImage;
	ipImageRes				:	ITcVnImage;
	ipImageResDisp			:	ITcVnDisplayableImage;
	
	// Code
	ipCodeDecodedList		:	ITcVnContainer; 
	ipCodeContourList		:	ITcVnContainer;
	sCodeAsString			: 	STRING(255);

	// Watchdog
	hrWD					:	HRESULT;
	tStop					:	DINT := 50000;
	tRest					:	DINT;
	
	// Color
	aColorGreen				:	TcVnVector4_LREAL := [0, 255, 0];
	
	// Return code
	nReturnCode				:	DWORD;
	sReturnCode				:	STRING;
	sResultText				:	STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Disclaimer
   
// THIS publication contains statements about the suitability OF our products FOR certain 
// areas OF application. These statements are based on typical features OF our products. 
// The examples shown in THIS publication are FOR demonstration purposes only. The 
// information provided herein should NOT be regarded as specific operation characteristics. 
// It is incumbent on the customer TO check AND decide whether a product is suitable FOR use 
// in a particular application. We DO NOT give ANY warranty that the source code which is 
// made available with this publication is complete or accurate. 
   
// THE SAMPLE CODE CONTAINED IN THIS PUBLICATION IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY 
// KIND, EITHER EXPRESSED, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION, ANY WARRANTY 
// WITH RESPECT TO NON-INFRINGEMENT, FREEDOM FROM PROPRIETARY RIGHTS OF THIRD PARTIES OR 
// FITNESS FOR ANY PARTICULAR PURPOSE. 
   
// THIS publication may be changed FROM TIME TO TIME without prior notice. No liability 
// is assumed FOR errors AND/OR omissions. Our products are described in detail in our 
// data sheets AND documentations. Product-specific warnings AND cautions must be observed. 
// FOR the latest version OF our data sheets AND documentations visit our website 
// (www.beckhoff.de). 
   
// © Beckhoff Automation GmbH & Co. KG, March 2020
   
// The reproduction, distribution AND utilization OF THIS document as well as the 
// communication OF its contents TO others without express authorization is prohibited. 
// Offenders will be held liable FOR the payment OF damages. All rights reserved in the 
// event of the grant of a patent, utility model or design.

//-----------------------------------------------------------------------------------------

// SAMPLE - EAN-13 Barcode Reading with result evaluation
// ======================================================

// Steps To Do:
// ------------
// 1. Add the sample images from '_Images' to the FileSource1
// 2. Change Watchdog tStop time to get not found or watchdog timeout result 

eState := fbCamera.GetState();

CASE eState OF
	
TCVN_CS_INITIAL, TCVN_CS_INITIALIZING, TCVN_CS_INITIALIZED, TCVN_CS_OPENING, TCVN_CS_OPENED, TCVN_CS_STARTACQUISITION:
	hr := fbCamera.StartAcquisition();
	
TCVN_CS_ACQUIRING:

	hr := fbCamera.GetCurrentImage(ipImageIn);

	IF SUCCEEDED(hr) AND ipImageIn <> 0 THEN
	
		// Create Result Image
		hr := F_VN_ConvertColorSpace(ipImageIn, ipImageRes, TCVN_CST_GRAY_TO_RGB, hr);
	
		// Execute the Barcode Reading Function with EAN13 selected monitored by the Watchdog-Function 
		hrWD := F_VN_StartRelWatchdog(tStop, S_OK);
			hr := F_VN_ReadBarcode(
					ipSrcImage			:=	ipImageIn, 
					ipDecodedData		:=	ipCodeDecodedList, 
					eBarcodeType		:=	ETcVnBarcodeType.TCVN_BT_EAN13, 
					hrPrev				:=	hr
			);
		hrWD := F_VN_StopWatchdog(hrWD, tRest => tRest);
		
		// Handle return-code
		IF hr = S_OK THEN
			// Prepare code result in string
			hr := F_VN_ExportSubContainer_String(ipCodeDecodedList, 0, sCodeAsString, 255, hr);
			sResultText := CONCAT('Code: ', sCodeAsString);
		ELSE
			// Check for succeeded return codes or add specific error handling 
			CASE hr OF
				S_FALSE:
					sResultText := 'No code found...';

				S_WATCHDOG_TIMEOUT:
					sResultText := 'Cancelled by watchdog...';
			ELSE
				// Extract error-code from HRESULT & react accordingly
				nReturnCode := DINT_TO_DWORD(hr) AND 16#FFF;
				sReturnCode := DWORD_TO_HEXSTR(nReturnCode, 3, FALSE);
				sResultText := CONCAT('Returncode ', sReturnCode);
			END_CASE
		END_IF
		// Write Result into Result Image
		hr := F_VN_PutTextExp(sResultText, ipImageRes, 50, 100, ETcVnFontType.TCVN_FT_HERSHEY_PLAIN, 4, aColorGreen, 3, TCVN_LT_4_CONNECTED, FALSE, S_OK);
				
		// Display Input Image
		hr := F_VN_TransformIntoDisplayableImage(ipImageIn, ipImageInDisp, hr);
		
		// Draw result image
		hr := F_VN_TransformIntoDisplayableImage(ipImageRes, ipImageResDisp, hr);
	END_IF

TCVN_CS_ERROR:
	hr := fbCamera.Reset();
	
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="37" Count="41" />
      <LineId Id="171" Count="0" />
      <LineId Id="80" Count="7" />
      <LineId Id="91" Count="32" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="4" />
      <LineId Id="2" Count="0" />
      <LineId Id="134" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>