<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="MAIN" Id="{8484d2fa-36ee-49bf-aac1-2942b8e3e5f1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// Status
	hr				:	HRESULT;
	lastHr			:	HRESULT;
	
	// Algorithm parameters
	bThreshold		:	BOOL							:=	TRUE;
	fThreshold		:	LREAL							:=	70;
	eSEShape		:	ETcVnStructuringElementShape	:=	TCVN_SES_RECTANGLE;
	aSESize			:	ARRAY [0..1] OF UDINT			:=	[29, 29];
	eOperator		:	ETcVnMorphologicalOperator		:=	TCVN_MO_OPENING;
	
	// Images and state machine
	ipImageIn		:	ITcVnImage;
	ipImageInDisp	:	ITcVnDisplayableImage;
	ipImageRes		:	ITcVnImage;
	ipImageResDisp	:	ITcVnDisplayableImage;
	fbCameraControl	:	FB_VN_SimpleCameraControl;
	eCameraState	:	ETcVnCameraState;
	
	// Miscellaneous
	ipElement		:	ITcVnImage;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//	Disclaimer
  	
//	THIS publication contains statements about the suitability OF our products FOR certain 
//	areas OF application. These statements are based on typical features OF our products. 
//	The examples shown in THIS publication are FOR demonstration purposes only. The 
//	information provided herein should NOT be regarded as specific operation characteristics. 
//	It is incumbent on the customer TO check AND decide whether a product is suitable FOR use 
//	in a particular application. We DO NOT give ANY warranty that the source code which is 
//	made available with this publication is complete or accurate. 
  	
//	THE SAMPLE CODE CONTAINED IN THIS PUBLICATION IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY 
//	KIND, EITHER EXPRESSED, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION, ANY WARRANTY 
//	WITH RESPECT TO NON-INFRINGEMENT, FREEDOM FROM PROPRIETARY RIGHTS OF THIRD PARTIES OR 
//	FITNESS FOR ANY PARTICULAR PURPOSE. 
  	
//	THIS publication may be changed FROM TIME TO TIME without prior notice. No liability 
//	is assumed FOR errors AND/OR omissions. Our products are described in detail in our 
//	data sheets AND documentations. Product-specific warnings AND cautions must be observed. 
//	FOR the latest version OF our data sheets AND documentations visit our website 
//	(www.beckhoff.de). 
  	
//	© Beckhoff Automation GmbH & Co. KG, March 2020
  	
//	The reproduction, distribution AND utilization OF THIS document as well as the 
//	communication OF its contents TO others without express authorization is prohibited. 
//	Offenders will be held liable FOR the payment OF damages. All rights reserved in the 
//	event of the grant of a patent, utility model or design.

//	==========================================================================================

//	Sample: Morphological Operators
//	----------------------------------------

//	Steps to do:
//	 1. Add images to the FileSource1
//	 1. Change the variables of the algorithm parameters and observe the different results

eCameraState := fbCameraControl.GetState();

// CameraControl is in error state, so try to reset the camera connection
IF eCameraState = TCVN_CS_ERROR THEN
	hr := fbCameraControl.Reset();

// Camera not yet streaming
ELSIF eCameraState < TCVN_CS_ACQUIRING THEN
	hr := fbCameraControl.StartAcquisition();

// Camera streaming
ELSIF eCameraState = TCVN_CS_ACQUIRING THEN
	hr := fbCameraControl.GetCurrentImage(ipImageIn);
	
	IF SUCCEEDED(hr) AND ipImageIn <> 0 THEN
		
		IF bThreshold THEN
			hr := F_VN_Threshold(
				ipSrcImage		:=	ipImageIn,
				ipDestImage		:=	ipImageIn,
				fThreshold		:=	fThreshold,
				fMaxValue		:=	255,
				eThresholdType	:=	TCVN_TT_BINARY,
				hrPrev			:=	hr);
		END_IF
		
		hr := F_VN_CreateStructuringElement(
			ipStructuringElement	:=	ipElement,
			eShape					:=	eSEShape,
			nWidth					:=	aSESize[0],
			nHeight					:=	aSESize[1],
			hrPrev					:=	hr);
		
		hr := F_VN_MorphologicalOperator(
			ipSrcImage  			:=  ipImageIn,
			ipDestImage 			:=  ipImageRes,
			eOperator   			:=  eOperator,
			ipStructuringElement	:=  ipElement,
			hrPrev      			:=  hr);
		
		// Display Input and Result Image
		hr := F_VN_TransformIntoDisplayableImage(ipImageIn, ipImageInDisp, hr);
		hr := F_VN_TransformIntoDisplayableImage(ipImageRes, ipImageResDisp, hr);
		
		lastHr := hr;
		
	END_IF
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="28" Count="34" />
      <LineId Id="117" Count="0" />
      <LineId Id="64" Count="13" />
      <LineId Id="114" Count="0" />
      <LineId Id="78" Count="9" />
      <LineId Id="89" Count="7" />
      <LineId Id="98" Count="6" />
      <LineId Id="106" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>